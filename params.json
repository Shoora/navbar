{"name":"Navbar","tagline":"A tiny library to create nav elements that smart update on scroll to keep the correct item active. Fast, supports older browsers, and has no dependencies.","body":"# navbar\r\n\r\n`navbar` is a tiny library to help you create navigation bars that listen for\r\nscroll events and calculate which element is closest to the top left of the\r\nwindow, giving the associated navigation list item a `navbar-active` class.\r\nYou feed it a list of elements and a function that returns `navbar` list items,\r\nand it returns a `nav` element populated with navigation items. You can dress\r\nthis up with CSS to make it look how you like.\r\n\r\nIt may not look like it's doing much, but it's fiddly stuff. For a demonstration\r\nopen `demo.js` in your (recent version) browser.\r\n\r\n## Support\r\n\r\nThis library comes with built in support for loading with RequireJS and\r\nBrowserify. If you prefer to use neither, then you can still load it the old\r\nfashioned way, which will append the `navbar` function to the `window` object\r\n(as in the demo).\r\n\r\nThis library has no production dependencies, making loading with any of the\r\nabove mentioned schemes a breeze!\r\n\r\nThis library should support any browser that implements\r\n`EventTarget.addEventListener` or `EventTarget.attachEvent`, which should cover\r\nalmost any browser in use today, and certainly IE >= 6. If you find that navbar\r\ndoes not support a browser newer than IE6 then I consider it a bug, so please\r\nopen an issue for it.\r\n\r\n## Usage\r\n\r\n`navbar` is a function that takes an options object with the fields:\r\n\r\n| name | required | default | description |\r\n| ---- | -------- | ------- | ----------- |\r\n| `elementList` | true | N/A | An array or array-like object populated with elements to be represented in the nav list. |\r\n| `makeNavListItem` | true | N/A | A function that takes an element and creates a navigation list item from it. |\r\n| `target` | false | `document` | A DOM element to listen to for scroll events. |\r\n| `tagName` | false | `nav` | Define the tag of element for navbar to return. |\r\n| `debounceTime` | false | `undefined` | After a scroll event, subsequent scroll events will be ignored for `debouceTime` milliseconds. |\r\n\r\nThe navbar listens to scroll events, and will add a `navbar-active` class to the\r\nnav list item which is closest to the top of the window. This is pretty much all\r\nthat `navbar` does, although I like to think that the interface that it presents\r\nis nice for defining a `nav` element. Only one element will have this class at\r\nany given time. If a `debounceTime` is given (recommended), then `navbar` will\r\nignore further scroll events for that amount of time. Depending on your use case\r\nthis may enhance performance.\r\n\r\n\r\n## Example\r\n\r\nSimilar to the [demo](/demo), except using Browserify rather than just appending\r\nto the window object:\r\n\r\n```javascript\r\nvar navbar = require('navbar');\r\n\r\n// This function is where you define a list element, giving it classes,\r\n// registering listeners, and appending children as you like. This one couples\r\n// with demo.css to produce labels that appear when a the list item is hovered\r\n// over.\r\nfunction makeNavListItem(element) {\r\n  var li = document.createElement('li');\r\n  var label = document.createElement('span');\r\n  var spot = document.createElement('span');\r\n\r\n  // A label should have a nav-label class and contain the same text as the\r\n  // element.\r\n  label.className = 'nav-label';\r\n  label.textContent = element.textContent.trim();\r\n\r\n  spot.className = 'nav-spot';\r\n  spot.textContent = '‚óè';\r\n\r\n  li.appendChild(label);\r\n  li.appendChild(spot);\r\n\r\n  // Custom className for our CSS purposes only. navbar will work around\r\n  // existing classes by appending or removing the navbar-active class.\r\n  li.className = 'nav-element';\r\n\r\n  // I want clicks on nav items to scroll the relevant title into view.\r\n  li.addEventListener('click', function () {\r\n    element.scrollIntoView(true);\r\n  });\r\n\r\n  // Remember to return the list element at the end!\r\n  return li;\r\n}\r\n\r\n// Generate a nav list element for every h2 element on the page.\r\nvar nav = navbar({\r\n  elementList: document.querySelectorAll('h2'),\r\n  makeNavListItem: makeNavListItem,\r\n  debounceTime: 100\r\n});\r\n\r\n// Finally, append the element to the document. In this demo the navbar is\r\n// fixed, so I have simply appended to the body.\r\ndocument.querySelector('body').appendChild(nav);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}